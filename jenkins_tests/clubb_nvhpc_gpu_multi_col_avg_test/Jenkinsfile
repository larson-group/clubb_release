pipeline {

  agent any
  
  stages {
    stage('Modify Config Flags') {
      steps {
        sh '''sed -i "s:penta_solve_method.*:penta_solve_method = 2:g" input/tunable_parameters/configurable_model_flags.in'''
        sh '''sed -i "s:tridiag_solve_method.*:tridiag_solve_method = 2:g" input/tunable_parameters/configurable_model_flags.in'''
      }
    }
    stage('Compile GPU_ACC') {
      steps {
          sh '''source /etc/profile.d/larson-group.sh
                module load nvhpc netcdf-fortran
                compile/compile.bash -c config/linux_x86_64_nvhpc_gpu_openacc.bash'''
      }
    }
    stage('Run GPU_ACC double_prec full_res') {
      steps {
        lock( "GPU_${env.NODE_NAME}" ) {
          sh '''run_scripts/create_multi_col_params.py -n 100 -calls_per_out 1'''
          sh '''source /etc/profile.d/larson-group.sh
                module load nvhpc netcdf-fortran
                ulimit -s 8388608
                run_scripts/run_scm.bash -e -p ../clubb_params_multi_col.in arm
                mv output output_full_res; mkdir output'''
        }
      }
    }
    stage('Run GPU_ACC double_prec averaged') {
      steps {
        lock( "GPU_${env.NODE_NAME}" ) {
          sh '''run_scripts/create_multi_col_params.py -n 100 -calls_per_out 4'''
          sh '''source /etc/profile.d/larson-group.sh
                module load nvhpc netcdf-fortran
                ulimit -s 8388608
                run_scripts/run_scm.bash -e -p ../clubb_params_multi_col.in arm
                mv output output_double; mkdir output'''
        }
      }
    }
    stage('Run GPU_ACC single_prec averaged') {
      steps {
        lock( "GPU_${env.NODE_NAME}" ) {
          sh '''run_scripts/create_multi_col_params.py -n 100 -l_multi_col_output single -calls_per_out 4'''
          sh '''source /etc/profile.d/larson-group.sh
                module load nvhpc netcdf-fortran
                ulimit -s 8388608
                run_scripts/run_scm.bash -e -p ../clubb_params_multi_col.in arm
                mv output output_single; mkdir output'''
        }
      }
    }
    stage('Double Precision Compare') {
      steps {
        sh '''python run_scripts/check_multi_col_avg.py output_full_res/arm_multi_col_zm.nc output_double/arm_multi_col_zm.nc'''
        sh '''python run_scripts/check_multi_col_avg.py output_full_res/arm_multi_col_zt.nc output_double/arm_multi_col_zt.nc'''
      }
    }
    stage('Single Precision Compare') {
      steps {
        sh '''python run_scripts/check_multi_col_avg.py output_full_res/arm_multi_col_zm.nc output_single/arm_multi_col_zm.nc'''
        sh '''python run_scripts/check_multi_col_avg.py output_full_res/arm_multi_col_zt.nc output_single/arm_multi_col_zt.nc'''
      }
    }
  }
  post {
    failure {
      script {
      if ( "${env.JOB_NAME}" == "clubb_nvhpc_gpu_multi_col_avg_test" )
        // This command handles the email on failure feature of the jenkins test. This line is the same on every jenkins test.
      	emailext(to: 'messnermet@uwm.edu', subject: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has Failed", attachLog: true, body: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has failed. See the attached build log and the build results (${env.BUILD_URL}) for help troubleshooting.")
      }
    }
  }
}
