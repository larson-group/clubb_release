pipeline {

  agent any
  
  stages {
    stage('Legacy Compile') {
      steps {
        sh '''source /etc/profile.d/larson-group.sh
              module load intel netcdf-fortran
              compile/compile.bash -c config/linux_x86_64_ifort.bash'''
      }
    }
    stage('Legacy Run') {
      steps {
        sh '''source /etc/profile.d/larson-group.sh
              module load intel netcdf-fortran
              run_scripts/run_scm.bash -o ../output_legacy arm'''
      }
    }
    stage('cmake Compile') {
      steps {
          sh ''' source /etc/profile.d/larson-group.sh
                 module load intel netcdf-fortran
                 python compile.py'''
      }
    }
    stage('cmake Run') {
      steps {
        sh '''run_scripts/run_scm.py -out_dir output_cmake arm'''
      }
    }
    stage('Compare Outputs') {
      steps {
        sh '''run_scripts/run_bindiff_all.py output_legacy output_cmake -v 2'''
      }
    }
  }
  post {
    failure {
      script {
      if ( "${env.JOB_NAME}" == "clubb_cmake_output_matching" )
        // This command handles the email on failure feature of the jenkins test. This line is the same on every jenkins test.
      	emailext(to: 'messnermet@uwm.edu', subject: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has Failed", attachLog: true, body: "${env.JOB_NAME} build ${env.BUILD_NUMBER} has failed. See the attached build log and the build results (${env.BUILD_URL}) for help troubleshooting.")
      }
    }
  }
}
