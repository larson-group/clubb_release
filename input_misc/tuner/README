$Id$

INPUT_MISC/TUNER DIRECTORY OVERVIEW
====================================

The error_<CASE NAME>.in files contain the following namelists:

--------------------------------------------------------------------------------
1. &stats:
--------------------------------------------------------------------------------

  Name        | Data type  
------------------------------------------
f_tol	| real, default precision 
 This is the degree of accuracy in "tuning" (i.e. the # of digits).
 Decreasing f_tol results in a tighter criterion of convergence.
 It only applies to the Numerical Recipes subroutines.

l_results_stdout  | logical
 Will print all results of tuning to the terminal if true
 l_results_file will generate a new error.in based on the new constants if true

l_results_file  | logical
 Will output results to a text file.

l_stdout_on_invalid  | logical
 Will write a series of namelists for analyzing what parameter sets cause the 
 model to crash.

l_keep_params_equal | logical
 Enables the option to keep the values of different parameters equal.
 Those constraints can be specified in the namelist "parameter_constraints"
 in the same error_*.in file.

l_use_prescribed_rand_seed | logical
 The tuner will initialize the random number generator with a fixed seed value
 instead of a value based on the unix time at execution.
 If prescribed_rand_seed is not specified in this namelist, the value 1 is used.
 This option should be used when the tuner should produce reproducible results.

anneal_iter | integer
 The variable anneal_iter are only used in amebsa runs.  It determines the 
 number of times the subroutine is called.

anneal_temp | real, default precision
 Used for both amebsa and the enhanced simulated annealing algorithm.  
 It determines the starting temperature for the algorithms.

max_final_temp | real, default precision
 Used to specify the maximum temperature the simulated annealing tuner can 
 stop on. For example, 0.1 would mean that the temp must be below 0.1 before
 calling it quits.

tune_type | integer
   0 for amoeba(downhill simplex method with random restart), or
   1 for amebsa(downhill simplex with simulated annealing), or
   2 for Siarry et al., 1997 enhanced simulated annealing.

max_iters_in | integer
 Set a maximum number of tuner iterations, after which
 the tuner stops and returns the current optimal parameter set.

stp_adjst_factor_in | real, default precision
 Defines the influence of the improvement ratio on the next step size
 for the enhanced Simann optimization algorithm after each temp stage.
 Default = 1
 For an explanation for the calculation see stp_adjst_shift_in.

stp_adjst_shift_in | real, default precision
 Defines the value of the improvement ratio for which the step size stays the same.
 Default = .5
 The new step size is calculated as follows:
 new_stp = old_stp * ( stp_adjst_factor_in * (improvement_ratio - stp_adjst_shift_in) + 1 )
 This defines a linear function in improvement_ratio between 0 and 1 with values (default case)
 Minimum: new_stp = .5 * old_stp (if there was no improvement, ratio = 0)
 No change: new_stp = old_stp (if improvement ratio = stp_adjst_shift_in = .5)
 Maximum: 1.5 * old_stp (if there was maximal improvement, ratio = 1)

t_variables | character array
 Setting t_variables:
 Most variables are named in the same fashion in both CLUBB and the LES, but
   because some are not they must be specified as an ordered pair of strings.

 Known values of the CLUBB variables and LES variables are listed in the 
 following table:

                 Variables
   CLUBB      | COAMPS-LES | SAM
   ------------------------------------
   cloud_frac | cf         | CLD
   rcm        | qcm        | QC * 1e-3
   wp3        | wp3        | W3
   thlm       | thlm       | THETAL (without ice)
   T_in_K     |            ! TABS
   rtm        | qtm        | QT * 1e-3
   um         | um         | U
   vm         | vm         | V
   wp2_zt     | wp2        | W2
   up2_zt     | up2        | U2
   vp2_zt     | vp2        | V2


  Values of t_variables for other variables can be found in the .ctl or .nc 
  files.

  Key variables for UWM: qcm/rcm, cloud_frac, rtm/qtm, thlm, um, vm, wp3

weight_var_nl  | real array
 The weight applied to each variable in the cost function

--------------------------------------------------------------------------------
2. &cases:
--------------------------------------------------------------------------------

  Name        | Data type  
------------------------------------------
hoc_stats_file_nl | character array
 Specifies the name of the CLUBB GrADS files we're reading from.

les_stats_file_nl | character array
 Specifies the name of the LES GrADS files we're reading from.

run_file_nl | character array
 Specifies the filename of file holding the &model_settings, etc. namelists. This file is created as the tuner runs, and should not be present beforehand.

z_i_nl | integer array
 Specifies the lowest altitude levels to average over, based on where those altitudes
 reside on the CLUBB grid.  The LES variable will be iterpolated to the CLUBB grid
 to compute the difference between the two.

z_f_nl | integer array
 Specifies the highest altitude levels to average over, based on where those altitudes
 reside on the CLUBB grid.  The LES variable will be iterpolated to the CLUBB grid
 to compute the difference between the two.

timestep_intvls_nl | integer array
 Specifies the time periods to average over in ordered pairs.

weight_case_nl | real array, default precision
 Specifies how much weight to give a case in the cost function.

--------------------------------------------------------------------------------
2. &initmax:
--------------------------------------------------------------------------------

  Name        | Data type  
------------------------------------------

C1, etc. | real, default precision
 These specify the amount to change the corresponding tunable parameters by.
 In the case of amoeba and amebsa the formula is 
 Parameter * ( (1 - spread) + rannum * spread * 2 )
 thus a spread of 0 will keep a constant static through the run.
 We must have 0 <= spread < 1.

In the Siarry, et al. case this is the value of ROSTEP.  Where the initial step vector is defined by the equation:
STPINI(k) = ( X0MAX(k) - X0MIN(k) ) * ROSTEP(k)

Where k is a particular tunable parameter.  Siarry et al. recommends a value 
of 0.25 for this.


-------------------------------------------------------------------------------------
Tips for using Gunther's esa_driver (tune_type = iesa = 2 and l_esa_siarry = .false.).
-------------------------------------------------------------------------------------

The "init_minmax" values in the error_*.in files should be set as follows:

 - For each parameter, give a minimum value (first) and a maximum value (second).
 - For parameters that are not being tuned, set the min and max values to zero.
 - For parameters you want to tune, a nonzero *max* value will activate that parameter
   for tuning.  The min and max values give the range of values the 
   tuner will accept for that parameter. Zero is a common minimum for many situations,
   but on occasion you may want to restrict the range further by choosing a nonzero min.
 - Negative values are not allowed, and the max should always be greater than 
   (i.e. not equal to) the min value, unless both are zero.

The "parameter_constraints" namelist gives the user the ability to hold certain
parameter values equal to each other throughout the course of a tuning experiment.
For example the user might want to tune C11 and C11b but keep them equal. The
values in the error_*.in files should be set as follows:

 - First, if you intend to set *any* parameter equal to another, make sure that
   l_keep_params_equal = .true.  It is set to .false. by default.  This flag is set
   in the same error_*.in file.
 - If you want to set a parameter equal to another, or even set several parameters
   equal to each other, only one should have nonzero values in the init_minmax namelist.
   For example, if you want to hold C1, C1b, and C14 equal to each other, 
   you could choose C1 to be set in the init_minmax namelist.  Then in the
   parameter_constraints namelist, set C1b = "C1" and C14 = "C1".  These will
   then be held equal to C1 over the tuning experiment.
 - A couple of additional rules about using the parameter_constraints namelist:
   * no parameter should be set equal to itself
   * no parameter should be set equal to another parameter that is not being tuned
   * a parameter that is being tuned should not be set equal to any other parameter.

To reduce the number of tuning iterations, i.e. calls to CLUBB, you may

- Reduce no_improve_max, so that we don't require so many iterations without significant improvement;
- Increase f_tol, so that a small improvement counts as another iteration without significant improvement;
- Increase max_final_temp, so that the final polishing is omitted;
- Decrease anneal_temp, so that the initial jumps in parameter space are not so large.
- Reduce max_iters, which sets a hard limit on the total number of iterations.
