commit ea0b892fd2c25049cb5d1429994dc80e4ab6ed9f
Author: Gunther Huebler <huebler@uwm.edu>
Date:   Wed Oct 8 17:39:23 2025 -0500

    Adding Morrison_microphys folder inside Microphys and reflecting change in compilation files. This is to make this new structure work with the way we include Morrison code, which is brought in from sam_clubb via the updateClubbMorrison.sh found in sys_admin/gitUpdateScripts/

commit 194887296834904671023aaea076cb176ae650e5
Merge: 1f751ddf9 fe14f38dc
Author: pickett <larsongroupgithub@gmail.com>
Date:   Sun Oct 5 20:47:42 2025 -0500

    Added morrison subtree
    
    git-subtree-dir: src/Morrison_microphys
    git-subtree-mainline: 1f751ddf9c56cfa707bc5b302f0bc3b40c708a8d
    git-subtree-split: fe14f38dc4183053649f580f02e2f8c540c2f06a

commit 1f751ddf9c56cfa707bc5b302f0bc3b40c708a8d
Author: Gunther Huebler <37674341+huebleruwm@users.noreply.github.com>
Date:   Sun Oct 5 20:45:58 2025 -0500

    Clubb driver upgrades part2 (#1257)
    
    * Initial commit. Breaking up clubb driver into sections. This should be bfb on everything, but this hasn't been checked well yet.
    
    * Combining namelist read into case init, same stuff really
    
    * Reorganizing many things, mainly in the pursuit of sectioning off code into groups like Microphys or Radiation
    
    * Organizing clubb_driver. All cases still BFB.
    
    * Mostly cosmetic improvements
    
    * Small improvements, comments, making clubb_driver_test to ensure consistency functionality of new compartmentalized model run components
    
    * Removing accidentally added files.
    
    * Mostly breaking up structure initialization behavior, split into init_ and zero_ so that we don't have to allocate to reset.
    
    * Doing away with clubb_model_settings and parameters_module in the spirit of consolidating functionality and spiting module variables.
    
    * Missed some changes to commit, should've been included in previous commit
    
    * Splitting up funcionality of setup_parameters. Now theres one part that calculates and another checks flag values.
    
    * GPU code working, but not BFB yet
    
    * GPU all BFB with mutliple columns, except gabls3, and driver test doesnt work (pass reinitialize, fails double timestep test)
    
    * Turning off multi_column output for the new driver test
    
    * Changes needed after rebase
    
    * Name changes, comments, and threadprivate additions for parallel runs
    
    * Adding variables to openacc data statements. Without this, the code crashes when using the GPU with l_godunov_upwind_xpyp_ta=.true.
    
    * Modifying compiler configurations (mainly optimization level) in order to prepare for switching scipts and tests to cmake, specifically separating out this BIT_CHANGING commit from the rest
    
    * thlm_ed and rtm_ed caused GPU errors since those variables were added to a acc loop, but never added to the acc data statement. This change makes it so they're only calculated on the CPU, since they are only used for stats, fixing the issue without adding the GPU memory footprint.
    
    * Adding -Mstack_arrays to the nvfortran flags causes us to use more stack space, which means we need to allow processes to use more stack space (when using lots of columns, since that increases memory footprint). We do by using using 'ulimit BIGNUMBER'.
    
    * Making old compiler script work with new file structure, also making Input_fields directory and library.
    
    * Missed text_writer_lib
    
    * Undoing Input_fields directory, it has too many depencencies currently, certainly can be simplified with argument lists.
    
    * Adding library dependency
    
    * Small changes to cmake list
    
    * Adding openmp flag back to gfortran script, needed for jenkins test
    
    * Making the init_inputfields get called for restarts too, because restart code call input_field code.
    
    * Making pdf_implicit_coefs_terms conditional in generalized grid test
    
    * Adding microphys directory to acc_to_omp script
    
    * Renaming -iters option in run_scm.py to -max_iters
    
    * Making run_scm_all.py and new driver test
    
    * Test and script improvements
    
    * Limiting iterations in jenkins test
    
    * Name change
    
    * adding ulimit
    
    * name update
    
    * jenkins script update
    
    * jenkins script update
    
    * jenkins script update
    
    * jenkins script update
    
    * jenkins script and run_scm_all.py update
    
    * jenkins script update
    
    * Turning calc_lmin_nu into calc_derrived_params, which is more general, and now calculates mixt_frac_max_mag
    
    * Small improvement for GPU
    
    * Small updates needed for host model integration
    
    * Removing accidentally added file
    
    * Small cleanup

commit df9e2152bc4889d33e801021a44c11fd6b685d1f
Author: Gunther Huebler <huebler@uwm.edu>
Date:   Fri Oct 3 15:18:26 2025 -0500

    Must add -fopenmp back for now, since this is used for the openmp test and it also broke the BFB tests for an obnoxious reason - that test compiles each commit without cleaning the build, so the baseline commit had -fopenmp and compiled with openmp stuff enabled, but then the subsequent commits had it turned off, but no changes in the files, so it didn't recompile with it off, and only turned it off in the linking stage, causing a build error. RESOLVED:320551df13ee84bdb9280db0be788a36e1f03494 RESOLVED:6c0201d44694fadf7f4bb0d4d58c3a9871096a22 RESOLVED:26644de2ea83ee6335b273f54dd57afc8f6f4b0c

commit 6c0201d44694fadf7f4bb0d4d58c3a9871096a22
Author: Gunther Huebler <huebler@uwm.edu>
Date:   Thu Oct 2 17:47:43 2025 -0500

    Adding -Mstack_arrays to the nvfortran flags causes us to use more stack space, which means we need to allow processes to use more stack space (when using lots of columns, since that increases memory footprint). We do by using using 'ulimit BIGNUMBER'.

commit 26644de2ea83ee6335b273f54dd57afc8f6f4b0c
Author: Gunther Huebler <huebler@uwm.edu>
Date:   Thu Oct 2 15:55:29 2025 -0500

    thlm_ed and rtm_ed caused GPU errors since those variables were added to a acc loop, but never added to the acc data statement. This change makes it so they're only calculated on the CPU, since they are only used for stats, fixing the issue without adding the GPU memory footprint.

commit 320551df13ee84bdb9280db0be788a36e1f03494
Author: Gunther Huebler <huebler@uwm.edu>
Date:   Thu Oct 2 14:25:51 2025 -0500

    Modifying compiler configurations (mainly optimization level) in order to prepare for switching scipts and tests to cmake, specifically separating out this BIT_CHANGING commit from the rest

commit eac573b2f186d900e285d06c2fd5a933316b7c4e
Author: Gunther Huebler <huebler@uwm.edu>
Date:   Thu Oct 2 14:20:19 2025 -0500

    Adding variables to openacc data statements. Without this, the code crashes when using the GPU with l_godunov_upwind_xpyp_ta=.true.

commit def788b540d3bf4995b1deefeb077e198906f158
Author: Gunther Huebler <huebler@uwm.edu>
Date:   Wed Oct 1 17:36:25 2025 -0500

    Making the l_random_k_lh_start set the random generator seed before generating a random. This should fix the generalized grid test, which failed for the only flag set that turned on l_random_k_lh_start. Before, the test passed because we used the same random seed for all timesteps, preventing differences in the random call. But now we use a different seed each timestep, causing differences. To ensure reproducibility, we use the seed each timestep to generate rand_pool, which is an effective solution, but we need to do that for the rand_integer_in_range call in the l_random_k_lh_start code for the same reason. Since this does change the random that comes out, this is BIT_CHANGING, but only for runs using both SILHS and l_random_k_lh_start=.true.

commit 1d2f7cf2618dd274b5745f2d82b23fdbba461c07
Author: Gunther Huebler <huebler@uwm.edu>
Date:   Wed Oct 1 16:15:53 2025 -0500

    Making restart test not overwrite time_initial. The time_initial should be defined by the _model.in file and not overwritten, but this script was setting time_initial to time_restart, which resulted in the initial iteration value (iinit) to be 1 in the restart regardless of the restart time.
